# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OUKI4MHzYAoK9m2PHpgLm7XQIN57HO6w
"""

!pip install nltk

import nltk
from nltk.util import ngrams
from collections import Counter
from collections import defaultdict
nltk.download('punkt')

from google.colab import drive
drive.mount('/content/drive')

# Path to the text file
file_path = '/content/drive/MyDrive/Test/neda.txt'

text = ''

with open(file_path, 'r', encoding='utf-8') as file:
    text = file.read().splitlines()

def make_ngram_model(n, ngram_list):
  
  # Create a list of tokens from the text
  tokens = nltk.word_tokenize(' '.join(text))  # Assuming 'text' contains the list of lines from the text file

  # Generate n-grams
  ngram_list = list(ngrams(tokens, n))

  return ngram_list

def make_dictionary_for_ngram_model(ngram_list):

  # Create a dictionary with default values of 0
  tuple_dict = defaultdict(int)

  # Count the occurrences of each tuple
  for tpl in ngram_list:
      tuple_dict[tpl] += 1

  # Divide all values by all number of the unique touple
  number_of_unique_touple = len(tuple_dict)
  for tpl in tuple_dict:
      tuple_dict[tpl] /= number_of_unique_touple

  return tuple_dict

three_gram_list = []
three_gram_list = make_ngram_model(3, three_gram_list)
tuple_dict_for_three_gram = {}
tuple_dict_for_three_gram = make_dictionary_for_ngram_model(three_gram_list)
# Print the resulting dictionary for 3 gram
for tpl, count in tuple_dict_for_three_gram.items():
    print(tpl, count)

def divide_sentence(sentence, num):
    words = sentence.split()
    result = []
    
    for i in range(len(words) - num + 1):
        group = tuple(words[i:i+num])
        result.append(group)
    
    return result

def calc_score_n_gram(word_n_groups , tuple_dict_for_n_gram):

  scores_dict = {}

  for group in word_n_groups:
    score = 1
    if group in tuple_dict_for_n_gram:
      score *= tuple_dict_for_n_gram[group]
    else:
      score = 0.000000000000000000000000000001
    scores_dict[group] = score

  final_score = 1
  for value in scores_dict.values():
    final_score *= value

  return final_score

sentence = 'من به مدرسه میروم '
number = 3

word_three_groups = divide_sentence(sentence, number)
print(word_three_groups)

three_gram_score = 0
three_gram_score = calc_score_n_gram(word_three_groups , tuple_dict_for_three_gram)
three_gram_score

two_gram_list = []
two_gram_list = make_ngram_model(2, two_gram_list)
tuple_dict_for_two_gram = {}
tuple_dict_for_two_gram = make_dictionary_for_ngram_model(two_gram_list)
# Print the resulting dictionary for bi-gram
for tpl, count in tuple_dict_for_two_gram.items():
    print(tpl, count)

sentence = 'من به مدرسه میروم '
number = 2

word_two_groups = divide_sentence(sentence, number)
print(word_two_groups)

two_gram_score = 0
two_gram_score = calc_score_n_gram(word_two_groups , tuple_dict_for_two_gram)
two_gram_score